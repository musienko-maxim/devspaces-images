======= BOOTSTRAP DOCKERFILE =======>
#
# Copyright (c) 2018-2023 Red Hat, Inc.
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#
# Contributors:
#   Red Hat, Inc. - initial API and implementation
#   IBM Corporation - implementation
#

# Builder: check meta.yamls and create index.json
# https://registry.access.redhat.com/ubi8/python-38
FROM registry.access.redhat.com/ubi8/python-38:1-121 as builder
#FROM registry-proxy.engineering.redhat.com/ubi8/python-38:1 as builder
USER 0

ARG BOOTSTRAP=true
ENV BOOTSTRAP=${BOOTSTRAP}
# if not defined or string is null, allow all registries/tags in list_referenced_images
# otherwise restrict to only those space-separated registries/tags; if others found, build will fail
# useful for failing build if quay images in an RC, or wrong devspaces image tag (3.2 in 3.1 build)
ARG ALLOWED_REGISTRIES=""
ENV ALLOWED_REGISTRIES=${ALLOWED_REGISTRIES}
ARG ALLOWED_TAGS=""
ENV ALLOWED_TAGS=${ALLOWED_TAGS}

COPY ./build/dockerfiles/content_sets_rhel8.repo /etc/yum.repos.d/
COPY ./build/dockerfiles/rhel.install.sh /tmp
RUN /tmp/rhel.install.sh && rm -f /tmp/rhel.install.sh

COPY ./build/scripts ./versions.json /build/
COPY ./build/scripts/clone_and_zip.sh /build/build/scripts/
COPY ./VERSION /
COPY ./devfiles /build/devfiles
WORKDIR /build/

RUN ./generate_devworkspace_templates.sh
RUN chmod -R g+rwX /build/resources

# validate devfile content
RUN ./check_referenced_images.sh devfiles --registries "${ALLOWED_REGISTRIES}" --tags "${ALLOWED_TAGS}"
RUN ./check_mandatory_fields.sh devfiles

# Cache projects in DS 
COPY ./build/dockerfiles/rhel.cache_projects.sh /tmp/ 
RUN /tmp/rhel.cache_projects.sh /build/ && rm -rf /tmp/rhel.cache_projects.sh /tmp/resources.tgz 

# don't do swaps, or we end up with missing content if built on s390x or ppc64le worker
# RUN ./swap_yamlfiles.sh devfiles
# RUN ./swap_images.sh devfiles
RUN ./index.sh > /build/devfiles/index.json && \
    ./list_referenced_images.sh devfiles > /build/devfiles/external_images.txt && \
    ./list_referenced_images_by_file.sh devfiles > /build/devfiles/external_images_by_devfile.txt && \
    chmod -R g+rwX /build/devfiles

<======= BOOTSTRAP DOCKERFILE =======
======= START BOOTSTRAP BUILD =======>
STEP 1/23: FROM registry.access.redhat.com/ubi8/python-38:1-121 AS builder
STEP 2/23: USER 0
--> 1cfc272b5ec
STEP 3/23: ARG BOOTSTRAP=true
--> 0cc11c90e9c
STEP 4/23: ENV BOOTSTRAP=${BOOTSTRAP}
--> 98857873f6e
STEP 5/23: ARG ALLOWED_REGISTRIES=""
--> 6c9623dab72
STEP 6/23: ENV ALLOWED_REGISTRIES=${ALLOWED_REGISTRIES}
--> e85c183f480
STEP 7/23: ARG ALLOWED_TAGS=""
--> 73924979f72
STEP 8/23: ENV ALLOWED_TAGS=${ALLOWED_TAGS}
--> 8e68ddab8da
STEP 9/23: COPY ./build/dockerfiles/content_sets_rhel8.repo /etc/yum.repos.d/
--> 1cebe37a2ab
STEP 10/23: COPY ./build/dockerfiles/rhel.install.sh /tmp
--> e69dbce3f1e
STEP 11/23: RUN /tmp/rhel.install.sh && rm -f /tmp/rhel.install.sh

Installed:
  containers-common-2:1-46.module+el8.7.0+17824+66a0202b.x86_64                 
  criu-3.15-3.module+el8.7.0+17824+66a0202b.x86_64                              
  fuse-common-3.3.0-16.el8.x86_64                                               
  fuse-overlayfs-1.9-1.module+el8.7.0+17824+66a0202b.x86_64                     
  fuse3-3.3.0-16.el8.x86_64                                                     
  fuse3-libs-3.3.0-16.el8.x86_64                                                
  iptables-libs-1.8.4-23.el8_7.1.x86_64                                         
  jansson-2.14-1.el8.x86_64                                                     
  jq-1.6-3.el8.x86_64                                                           
  kmod-25-19.el8.x86_64                                                         
  libibverbs-41.0-1.el8.x86_64                                                  
  libmnl-1.0.4-6.el8.x86_64                                                     
  libnet-1.1.6-15.el8.x86_64                                                    
  libnftnl-1.1.5-5.el8.x86_64                                                   
  libpcap-14:1.9.1-5.el8.x86_64                                                 
  libslirp-4.4.0-1.module+el8.7.0+17824+66a0202b.x86_64                         
  nftables-1:0.9.3-26.el8.x86_64                                                
  oniguruma-6.8.2-2.el8.x86_64                                                  
  protobuf-c-1.3.0-6.el8.x86_64                                                 
  runc-1:1.1.4-1.module+el8.7.0+17824+66a0202b.x86_64                           
  skopeo-2:1.9.4-0.1.module+el8.7.0+17824+66a0202b.x86_64                       
  slirp4netns-1.2.0-2.module+el8.7.0+17824+66a0202b.x86_64                      

Collecting yq
  Downloading https://files.pythonhosted.org/packages/aa/09/31d9eb047a46cf5680c4970f42bee931bd78aab4e3ded448406de4730f96/yq-3.1.1-py3-none-any.whl
Collecting argcomplete
  Downloading https://files.pythonhosted.org/packages/d3/e5/c5509683462e51b070df9e83e7f72c1ccfe3f733f328b4a0f06804c27278/argcomplete-2.0.0-py2.py3-none-any.whl
Collecting xmltodict>=0.11.0
  Downloading https://files.pythonhosted.org/packages/94/db/fd0326e331726f07ff7f40675cd86aa804bfd2e5016c727fa761c934990e/xmltodict-0.13.0-py2.py3-none-any.whl
Collecting PyYAML>=5.3.1
  Downloading https://files.pythonhosted.org/packages/d7/42/7ad4b6d67a16229496d4f6e74201bdbebcf4bc1e87d5a70c9297d4961bd2/PyYAML-6.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (701kB)
Collecting toml>=0.10.0
  Downloading https://files.pythonhosted.org/packages/44/6f/7120676b6d73228c96e17f1f794d8ab046fc910d781c8d151120c3f1569e/toml-0.10.2-py2.py3-none-any.whl
Installing collected packages: xmltodict, PyYAML, toml, argcomplete, yq
Successfully installed PyYAML-6.0 argcomplete-2.0.0 toml-0.10.2 xmltodict-0.13.0 yq-3.1.1
python: Python 3.8.13
yq: yq 3.1.1
jq: jq-1.6
--> e2a34e93033
STEP 12/23: COPY ./build/scripts ./versions.json /build/
--> 4eca93f99e1
STEP 13/23: COPY ./build/scripts/clone_and_zip.sh /build/build/scripts/
--> bcd48585671
STEP 14/23: COPY ./VERSION /
--> f6a7eb2200c
STEP 15/23: COPY ./devfiles /build/devfiles
--> a46c2b9a666
STEP 16/23: WORKDIR /build/
--> 0becfd62963
STEP 17/23: RUN ./generate_devworkspace_templates.sh

> core-js@2.6.12 postinstall /build/node_modules/core-js
> node -e "try{require('./postinstall')}catch(e){}"

[96mThank you for using core-js ([94m https://github.com/zloirock/core-js [96m) for polyfilling JavaScript standard library![0m

[96mThe project needs your help! Please consider supporting of core-js on Open Collective or Patreon: [0m
[96m>[94m https://opencollective.com/core-js [0m
[96m>[94m https://www.patreon.com/zloirock [0m

[96mAlso, the author of core-js ([94m https://github.com/zloirock [96m) is looking for a good job -)[0m

+ @eclipse-che/che-devworkspace-generator@0.0.1-c8bd5c0
added 119 packages from 183 contributors and audited 119 packages in 12.223s

5 packages are looking for funding
  run `npm fund` for details

found 1 high severity vulnerability
  run `npm audit fix` to fix them, or `npm audit` for details
DevWorkspace che-theia-java-lombok was generated.
DevWorkspace che-code-java-lombok was generated.
DevWorkspace che-idea-java-lombok was generated.
DevWorkspace che-theia-quarkus-quickstart was generated.
DevWorkspace che-code-quarkus-quickstart was generated.
DevWorkspace che-idea-quarkus-quickstart was generated.
DevWorkspace che-theia-nodejs-mongodb was generated.
DevWorkspace che-code-nodejs-mongodb was generated.
DevWorkspace che-idea-nodejs-mongodb was generated.
DevWorkspace che-theia-nodejs-web-app was generated.
DevWorkspace che-code-nodejs-web-app was generated.
DevWorkspace che-idea-nodejs-web-app was generated.
DevWorkspace che-theia-python-hello-world was generated.
DevWorkspace che-code-python-hello-world was generated.
DevWorkspace che-idea-python-hello-world was generated.
DevWorkspace che-theia-cpp was generated.
DevWorkspace che-code-cpp was generated.
DevWorkspace che-idea-cpp was generated.
DevWorkspace che-theia-dotnet was generated.
DevWorkspace che-code-dotnet was generated.
DevWorkspace che-idea-dotnet was generated.
DevWorkspace che-theia-golang was generated.
DevWorkspace che-code-golang was generated.
DevWorkspace che-idea-golang was generated.
DevWorkspace che-theia-php-hello-world was generated.
DevWorkspace che-code-php-hello-world was generated.
DevWorkspace che-idea-php-hello-world was generated.
--> 5f84bbef175
STEP 18/23: RUN chmod -R g+rwX /build/resources
--> b94b5d8cc90
STEP 19/23: RUN ./check_referenced_images.sh devfiles --registries "${ALLOWED_REGISTRIES}" --tags "${ALLOWED_TAGS}"
 + registry.redhat.io/devspaces/code-rhel8:3.5 PASS - registry.redhat.io allowed
 + registry.redhat.io/devspaces/idea-rhel8:3.5 PASS - registry.redhat.io allowed
 + registry.redhat.io/devspaces/machineexec-rhel8:3.5 PASS - registry.redhat.io allowed
 + registry.redhat.io/devspaces/theia-endpoint-rhel8:3.5 PASS - registry.redhat.io allowed
 + registry.redhat.io/devspaces/theia-rhel8:3.5 PASS - registry.redhat.io allowed
 + registry.redhat.io/devspaces/udi-rhel8:3.5 PASS - registry.redhat.io allowed
 + registry.redhat.io/rhscl/mongodb-36-rhel7:1-50 PASS - registry.redhat.io allowed
 + registry.redhat.io/devspaces/code-rhel8:3.5 PASS - 3.5 allowed
 + registry.redhat.io/devspaces/idea-rhel8:3.5 PASS - 3.5 allowed
 + registry.redhat.io/devspaces/machineexec-rhel8:3.5 PASS - 3.5 allowed
 + registry.redhat.io/devspaces/theia-endpoint-rhel8:3.5 PASS - 3.5 allowed
 + registry.redhat.io/devspaces/theia-rhel8:3.5 PASS - 3.5 allowed
 + registry.redhat.io/devspaces/udi-rhel8:3.5 PASS - 3.5 allowed
 = registry.redhat.io/rhscl/mongodb-36-rhel7:1-50 PASS
--> 700a6006e8a
STEP 20/23: RUN ./check_mandatory_fields.sh devfiles
Checking devfile 'devfiles/TP__cpp__c-plus-plus/meta.yaml'
Checking devfile 'devfiles/TP__dotnet__dotnet-web-simple/meta.yaml'
Checking devfile 'devfiles/TP__go__golang-health-check/meta.yaml'
Checking devfile 'devfiles/TP__php__php-hello-world/meta.yaml'
Checking devfile 'devfiles/java11-maven-lombok__lombok-project-sample/meta.yaml'
Checking devfile 'devfiles/java11-maven-quarkus__quarkus-quickstarts/meta.yaml'
Checking devfile 'devfiles/nodejs__nodejs-mongodb-sample/meta.yaml'
Checking devfile 'devfiles/nodejs__web-nodejs-sample/meta.yaml'
Checking devfile 'devfiles/python__python-hello-world/meta.yaml'
--> 9c6e2d161d3
STEP 21/23: COPY ./build/dockerfiles/rhel.cache_projects.sh /tmp/ 
--> ce8abf15974
STEP 22/23: RUN /tmp/rhel.cache_projects.sh /build/ && rm -rf /tmp/rhel.cache_projects.sh /tmp/resources.tgz 
--> b9e9391973a
STEP 23/23: RUN ./index.sh > /build/devfiles/index.json &&     ./list_referenced_images.sh devfiles > /build/devfiles/external_images.txt &&     ./list_referenced_images_by_file.sh devfiles > /build/devfiles/external_images_by_devfile.txt &&     chmod -R g+rwX /build/devfiles
COMMIT devfileregistry:tmp
--> 6603efae96d
Successfully tagged localhost/devfileregistry:tmp
6603efae96d41ce26ef68ab34c220106010fbc1e6b748e0c3c0a55a7bee352e9
<======= END BOOTSTRAP BUILD =======
Downloading root-local.tgz
Downloading resources.tgz
DIFF START *****
diff --suppress-common-lines -u -r -x '*.pyc' -x installed-files.txt /tmp/tmp.0KEflWmt0V/lib/python3.8/site-packages/yq/dumper.py /tmp/tmp.XOOC51JVyg/lib/python3.8/site-packages/yq/dumper.py
--- /tmp/tmp.0KEflWmt0V/lib/python3.8/site-packages/yq/dumper.py	2023-02-09 10:11:08.000000000 -0500
+++ /tmp/tmp.XOOC51JVyg/lib/python3.8/site-packages/yq/dumper.py	2023-03-01 15:38:51.626106607 -0500
@@ -1,16 +1,19 @@
 import re
 
 import yaml
+
+from .loader import hash_key, set_yaml_grammar
+
 # try:
 #     from yaml import CSafeDumper as default_dumper
 # except ImportError:
 #     from yaml import SafeDumper as default_dumper
 
-from .loader import hash_key, set_yaml_grammar
 
 class OrderedIndentlessDumper(yaml.SafeDumper):
     pass
 
+
 class OrderedDumper(yaml.SafeDumper):
     def increase_indent(self, flow=False, indentless=False):
         return super(OrderedDumper, self).increase_indent(flow, False)
@@ -18,9 +21,11 @@
     def ignore_aliases(self, data):
         return True
 
+
 yaml_value_annotation_re = re.compile(r"^__yq_(?P<type>tag|style)_(?P<key>.+)__$")
 yaml_item_annotation_re = re.compile(r"^__yq_(?P<type>tag|style)_(?P<key>\d+)_(?P<value>.+)__$")
 
+
 def get_dumper(use_annotations=False, indentless=False, grammar_version="1.1"):
     # if not (use_annotations or indentless):
     #     return default_dumper
diff --suppress-common-lines -u -r -x '*.pyc' -x installed-files.txt /tmp/tmp.0KEflWmt0V/lib/python3.8/site-packages/yq/__init__.py /tmp/tmp.XOOC51JVyg/lib/python3.8/site-packages/yq/__init__.py
--- /tmp/tmp.0KEflWmt0V/lib/python3.8/site-packages/yq/__init__.py	2023-02-09 10:11:08.000000000 -0500
+++ /tmp/tmp.XOOC51JVyg/lib/python3.8/site-packages/yq/__init__.py	2023-03-01 15:38:51.626106607 -0500
@@ -7,38 +7,49 @@
 
 # PYTHON_ARGCOMPLETE_OK
 
-import os, sys, argparse, subprocess, json, io
-from datetime import datetime, date, time
+import argparse
+import io
+import json
+import os
+import subprocess
+import sys
+from datetime import date, datetime, time
 
-import yaml, argcomplete
+import argcomplete
+import yaml
 
-from .parser import get_parser, jq_arg_spec
-from .loader import get_loader
 from .dumper import get_dumper
+from .loader import get_loader
+from .parser import get_parser, jq_arg_spec
 
 try:
     from .version import version as __version__
 except ImportError:
     __version__ = "0.0.0"
 
+
 class JSONDateTimeEncoder(json.JSONEncoder):
     def default(self, o):
         if isinstance(o, (datetime, date, time)):
             return o.isoformat()
         return json.JSONEncoder.default(self, o)
 
+
 def decode_docs(jq_output, json_decoder):
     while jq_output:
         doc, pos = json_decoder.raw_decode(jq_output)
-        jq_output = jq_output[pos + 1:]
+        jq_output = jq_output[pos + 1 :]
         yield doc
 
+
 def xq_cli():
     cli(input_format="xml", program_name="xq")
 
+
 def tq_cli():
     cli(input_format="toml", program_name="tomlq")
 
+
 class DeferredOutputStream:
     def __init__(self, name, mode="w"):
         self.name = name
@@ -62,6 +73,7 @@
     def __getattr__(self, a):
         return getattr(self.fh, a)
 
+
 def cli(args=None, input_format="yaml", program_name="yq"):
     parser = get_parser(program_name, __doc__)
     argcomplete.autocomplete(parser)
@@ -101,9 +113,9 @@
         else:
             jq_filter_arg_loc = len(jq_args)
             if "--args" in jq_args:
-                jq_filter_arg_loc = jq_args.index('--args') + 1
+                jq_filter_arg_loc = jq_args.index("--args") + 1
             elif "--jsonargs" in jq_args:
-                jq_filter_arg_loc = jq_args.index('--jsonargs') + 1
+                jq_filter_arg_loc = jq_args.index("--jsonargs") + 1
             jq_args.insert(jq_filter_arg_loc, args.jq_filter)
             if null_input:
                 args.input_streams.insert(0, open(os.devnull))
@@ -126,15 +138,18 @@
             msg = "{}: -i/--in-place can only be used with filename arguments, not on standard input"
             sys.exit(msg.format(program_name))
         for i, input_stream in enumerate(input_streams):
+
             def exit_handler(arg=None):
                 if arg:
                     sys.exit(arg)
+
             if i < len(input_streams):
                 yq_args["exit_func"] = exit_handler
             yq(input_streams=[input_stream], output_stream=DeferredOutputStream(input_stream.name), **yq_args)
     else:
         yq(**yq_args)
 
+
 def load_yaml_docs(in_stream, out_stream, jq, loader_class, max_expansion_factor, exit_func, prog):
     loader = loader_class(in_stream)
 
@@ -158,10 +173,27 @@
     finally:
         loader.dispose()
 
-def yq(input_streams=None, output_stream=None, input_format="yaml", output_format="json",
-       program_name="yq", width=None, indentless_lists=False, xml_root=None, xml_dtd=False, xml_force_list=frozenset(),
-       explicit_start=False, explicit_end=False, expand_merge_keys=True, expand_aliases=True,
-       max_expansion_factor=1024, yaml_output_grammar_version="1.1", jq_args=frozenset(), exit_func=None):
+
+def yq(
+    input_streams=None,
+    output_stream=None,
+    input_format="yaml",
+    output_format="json",
+    program_name="yq",
+    width=None,
+    indentless_lists=False,
+    xml_root=None,
+    xml_dtd=False,
+    xml_force_list=frozenset(),
+    explicit_start=False,
+    explicit_end=False,
+    expand_merge_keys=True,
+    expand_aliases=True,
+    max_expansion_factor=1024,
+    yaml_output_grammar_version="1.1",
+    jq_args=frozenset(),
+    exit_func=None,
+):
     if not input_streams:
         input_streams = [sys.stdin]
     if not output_stream:
@@ -173,11 +205,13 @@
     try:
         # Notes: universal_newlines is just a way to induce subprocess to make stdin a text buffer and encode it for us;
         # close_fds must be false for command substitution to work (yq . t.yml --slurpfile t <(yq . t.yml))
-        jq = subprocess.Popen(["jq"] + list(jq_args),
-                              stdin=subprocess.PIPE,
-                              stdout=subprocess.PIPE if converting_output else None,
-                              close_fds=False,
-                              universal_newlines=True)
+        jq = subprocess.Popen(
+            ["jq"] + list(jq_args),
+            stdin=subprocess.PIPE,
+            stdout=subprocess.PIPE if converting_output else None,
+            close_fds=False,
+            universal_newlines=True,
+        )
     except OSError as e:
         msg = "{}: Error starting jq: {}: {}. Is jq installed and available on PATH?"
         exit_func(msg.format(program_name, type(e).__name__, e))
@@ -191,18 +225,30 @@
             json_buffer = io.StringIO()
             for input_stream in input_streams:
                 if input_format == "yaml":
-                    loader_class = get_loader(use_annotations=use_annotations, expand_aliases=expand_aliases,
-                                              expand_merge_keys=expand_merge_keys)
-                    load_yaml_docs(in_stream=input_stream, out_stream=json_buffer, jq=None, loader_class=loader_class,
-                                   max_expansion_factor=max_expansion_factor, exit_func=exit_func, prog=program_name)
+                    loader_class = get_loader(
+                        use_annotations=use_annotations,
+                        expand_aliases=expand_aliases,
+                        expand_merge_keys=expand_merge_keys,
+                    )
+                    load_yaml_docs(
+                        in_stream=input_stream,
+                        out_stream=json_buffer,
+                        jq=None,
+                        loader_class=loader_class,
+                        max_expansion_factor=max_expansion_factor,
+                        exit_func=exit_func,
+                        prog=program_name,
+                    )
                 elif input_format == "xml":
                     import xmltodict
+
                     doc = xmltodict.parse(input_stream.read(), disable_entities=True, force_list=xml_force_list)
                     json.dump(doc, json_buffer, cls=JSONDateTimeEncoder)
                     json_buffer.write("\n")
                 elif input_format == "toml":
                     import toml
-                    doc = toml.load(input_stream)
+
+                    doc = toml.load(input_stream)  # type: ignore
                     json.dump(doc, json_buffer, cls=JSONDateTimeEncoder)
                     json_buffer.write("\n")
                 else:
@@ -210,24 +256,38 @@
             jq_out, jq_err = jq.communicate(json_buffer.getvalue())
             json_decoder = json.JSONDecoder()
             if output_format == "yaml" or output_format == "annotated_yaml":
-                dumper_class = get_dumper(use_annotations=use_annotations, indentless=indentless_lists,
-                                          grammar_version=yaml_output_grammar_version)
-                yaml.dump_all(decode_docs(jq_out, json_decoder), stream=output_stream, Dumper=dumper_class,
-                              width=width, allow_unicode=True, default_flow_style=False,
-                              explicit_start=explicit_start, explicit_end=explicit_end)
+                dumper_class = get_dumper(
+                    use_annotations=use_annotations,
+                    indentless=indentless_lists,
+                    grammar_version=yaml_output_grammar_version,
+                )
+                yaml.dump_all(
+                    decode_docs(jq_out, json_decoder),
+                    stream=output_stream,
+                    Dumper=dumper_class,
+                    width=width,
+                    allow_unicode=True,
+                    default_flow_style=False,
+                    explicit_start=explicit_start,
+                    explicit_end=explicit_end,
+                )
             elif output_format == "xml":
                 import xmltodict
+
                 for doc in decode_docs(jq_out, json_decoder):
                     if xml_root:
-                        doc = {xml_root: doc}
+                        doc = {xml_root: doc}  # type: ignore
                     elif not isinstance(doc, dict):
-                        msg = ("{}: Error converting JSON to XML: cannot represent non-object types at top level. "
-                               "Use --xml-root=name to envelope your output with a root element.")
+                        msg = (
+                            "{}: Error converting JSON to XML: cannot represent non-object types at top level. "
+                            "Use --xml-root=name to envelope your output with a root element."
+                        )
                         exit_func(msg.format(program_name))
                     full_document = True if xml_dtd else False
                     try:
-                        xmltodict.unparse(doc, output=output_stream, full_document=full_document, pretty=True,
-                                          indent="  ")
+                        xmltodict.unparse(
+                            doc, output=output_stream, full_document=full_document, pretty=True, indent="  "
+                        )
                     except ValueError as e:
                         if "Document must have exactly one root" in str(e):
                             raise Exception(str(e) + " Use --xml-root=name to envelope your output with a root element")
@@ -236,6 +296,7 @@
                     output_stream.write(b"\n" if sys.version_info < (3, 0) else "\n")
             elif output_format == "toml":
                 import toml
+
                 for doc in decode_docs(jq_out, json_decoder):
                     if not isinstance(doc, dict):
                         msg = "{}: Error converting JSON to TOML: cannot represent non-object types at top level."
@@ -243,27 +304,39 @@
                     toml.dump(doc, output_stream)
         else:
             if input_format == "yaml":
-                loader_class = get_loader(use_annotations=False, expand_aliases=expand_aliases,
-                                          expand_merge_keys=expand_merge_keys)
+                loader_class = get_loader(
+                    use_annotations=False, expand_aliases=expand_aliases, expand_merge_keys=expand_merge_keys
+                )
                 for input_stream in input_streams:
-                    load_yaml_docs(in_stream=input_stream, out_stream=jq.stdin, jq=jq, loader_class=loader_class,
-                                   max_expansion_factor=max_expansion_factor, exit_func=exit_func, prog=program_name)
+                    load_yaml_docs(
+                        in_stream=input_stream,
+                        out_stream=jq.stdin,
+                        jq=jq,
+                        loader_class=loader_class,
+                        max_expansion_factor=max_expansion_factor,
+                        exit_func=exit_func,
+                        prog=program_name,
+                    )
             elif input_format == "xml":
                 import xmltodict
+
                 for input_stream in input_streams:
-                    json.dump(xmltodict.parse(input_stream.read(), disable_entities=True,
-                                              force_list=xml_force_list), jq.stdin)
-                    jq.stdin.write("\n")
+                    json.dump(
+                        xmltodict.parse(input_stream.read(), disable_entities=True, force_list=xml_force_list),
+                        jq.stdin,  # type: ignore
+                    )
+                    jq.stdin.write("\n")  # type: ignore
             elif input_format == "toml":
                 import toml
+
                 for input_stream in input_streams:
-                    json.dump(toml.load(input_stream), jq.stdin)
-                    jq.stdin.write("\n")
+                    json.dump(toml.load(input_stream), jq.stdin, cls=JSONDateTimeEncoder)  # type: ignore
+                    jq.stdin.write("\n")  # type: ignore
             else:
                 raise Exception("Unknown input format")
 
             try:
-                jq.stdin.close()
+                jq.stdin.close()  # type: ignore
             except Exception:
                 pass
             jq.wait()
diff --suppress-common-lines -u -r -x '*.pyc' -x installed-files.txt /tmp/tmp.0KEflWmt0V/lib/python3.8/site-packages/yq/loader.py /tmp/tmp.XOOC51JVyg/lib/python3.8/site-packages/yq/loader.py
--- /tmp/tmp.0KEflWmt0V/lib/python3.8/site-packages/yq/loader.py	2023-02-09 10:11:08.000000000 -0500
+++ /tmp/tmp.XOOC51JVyg/lib/python3.8/site-packages/yq/loader.py	2023-03-01 15:38:51.627106607 -0500
@@ -3,87 +3,111 @@
 from hashlib import sha224
 
 import yaml
-from yaml.tokens import (AliasToken, AnchorToken, ScalarToken, FlowMappingStartToken, FlowMappingEndToken, KeyToken,
-                         ValueToken)
+from yaml.tokens import (
+    AliasToken,
+    AnchorToken,
+    FlowMappingEndToken,
+    FlowMappingStartToken,
+    KeyToken,
+    ScalarToken,
+    ValueToken,
+)
+
 try:
     from yaml import CSafeLoader as default_loader
 except ImportError:
-    from yaml import SafeLoader as default_loader
+    from yaml import SafeLoader as default_loader  # type: ignore
 
 
 core_resolvers = {
     "1.1": [
         {
             "tag": "tag:yaml.org,2002:bool",
-            "regexp": re.compile(r'''^(?:yes|Yes|YES|no|No|NO
+            "regexp": re.compile(
+                r"""^(?:yes|Yes|YES|no|No|NO
             |true|True|TRUE|false|False|FALSE
-            |on|On|ON|off|Off|OFF)$''', re.X),
-            "start_chars": list('yYnNtTfFoO')
-        }, {
+            |on|On|ON|off|Off|OFF)$""",
+                re.X,
+            ),
+            "start_chars": list("yYnNtTfFoO"),
+        },
+        {
             "tag": "tag:yaml.org,2002:float",
-            "regexp": re.compile(r'''^(?:[-+]?(?:[0-9][0-9_]*)\.[0-9_]*(?:[eE][-+][0-9]+)?
+            "regexp": re.compile(
+                r"""^(?:[-+]?(?:[0-9][0-9_]*)\.[0-9_]*(?:[eE][-+][0-9]+)?
             |\.[0-9_]+(?:[eE][-+][0-9]+)?
             |[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*
             |[-+]?\.(?:inf|Inf|INF)
-            |\.(?:nan|NaN|NAN))$''', re.X),
-            "start_chars": list('-+0123456789.')
-        }, {
+            |\.(?:nan|NaN|NAN))$""",
+                re.X,
+            ),
+            "start_chars": list("-+0123456789."),
+        },
+        {
             "tag": "tag:yaml.org,2002:int",
-            "regexp": re.compile(r'''^(?:[-+]?0b[0-1_]+
+            "regexp": re.compile(
+                r"""^(?:[-+]?0b[0-1_]+
             |[-+]?0[0-7_]+
             |[-+]?(?:0|[1-9][0-9_]*)
             |[-+]?0x[0-9a-fA-F_]+
-            |[-+]?[1-9][0-9_]*(?::[0-5]?[0-9])+)$''', re.X),
-            "start_chars": list('-+0123456789')
-        }, {
+            |[-+]?[1-9][0-9_]*(?::[0-5]?[0-9])+)$""",
+                re.X,
+            ),
+            "start_chars": list("-+0123456789"),
+        },
+        {
             "tag": "tag:yaml.org,2002:null",
-            "regexp": re.compile(r'''^(?: ~
+            "regexp": re.compile(
+                r"""^(?: ~
             |null|Null|NULL
-            | )$''', re.X),
-            "start_chars": ['~', 'n', 'N', '']
-        }, {
+            | )$""",
+                re.X,
+            ),
+            "start_chars": ["~", "n", "N", ""],
+        },
+        {
             "tag": "tag:yaml.org,2002:timestamp",
-            "regexp": re.compile(r'''^(?:[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]
+            "regexp": re.compile(
+                r"""^(?:[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]
             |[0-9][0-9][0-9][0-9] -[0-9][0-9]? -[0-9][0-9]?
             (?:[Tt]|[ \t]+)[0-9][0-9]?
             :[0-9][0-9] :[0-9][0-9] (?:\.[0-9]*)?
-            (?:[ \t]*(?:Z|[-+][0-9][0-9]?(?::[0-9][0-9])?))?)$''', re.X),
-            "start_chars": list('0123456789')
-        }, {
-            "tag": "tag:yaml.org,2002:value",
-            "regexp": re.compile(r'^(?:=)$'),
-            "start_chars": ['=']
-        }
+            (?:[ \t]*(?:Z|[-+][0-9][0-9]?(?::[0-9][0-9])?))?)$""",
+                re.X,
+            ),
+            "start_chars": list("0123456789"),
+        },
+        {"tag": "tag:yaml.org,2002:value", "regexp": re.compile(r"^(?:=)$"), "start_chars": ["="]},
     ],
     "1.2": [
         {
             "tag": "tag:yaml.org,2002:bool",
-            "regexp": re.compile(r'^(?:|true|True|TRUE|false|False|FALSE)$', re.X),
-            "start_chars": list('tTfF')
-        }, {
+            "regexp": re.compile(r"^(?:|true|True|TRUE|false|False|FALSE)$", re.X),
+            "start_chars": list("tTfF"),
+        },
+        {
             "tag": "tag:yaml.org,2002:int",
-            "regexp": re.compile(r'^(?:|0o[0-7]+|[-+]?(?:[0-9]+)|0x[0-9a-fA-F]+)$', re.X),
-            "start_chars": list('-+0123456789')
-        }, {
+            "regexp": re.compile(r"^(?:|0o[0-7]+|[-+]?(?:[0-9]+)|0x[0-9a-fA-F]+)$", re.X),
+            "start_chars": list("-+0123456789"),
+        },
+        {
             "tag": "tag:yaml.org,2002:float",
             "regexp": re.compile(
-                r'^(?:[-+]?(?:\.[0-9]+|[0-9]+(\.[0-9]*)?)(?:[eE][-+]?[0-9]+)?|[-+]?\.(?:inf|Inf|INF)|\.(?:nan|NaN|NAN))$',  # noqa
-                re.X
+                r"^(?:[-+]?(?:\.[0-9]+|[0-9]+(\.[0-9]*)?)(?:[eE][-+]?[0-9]+)?|[-+]?\.(?:inf|Inf|INF)|\.(?:nan|NaN|NAN))$",  # noqa
+                re.X,
             ),
-            "start_chars": list('-+0123456789.')
-        }, {
+            "start_chars": list("-+0123456789."),
+        },
+        {
             "tag": "tag:yaml.org,2002:null",
-            "regexp": re.compile(r'^(?:~||null|Null|NULL)$', re.X),
-            "start_chars": ['~', 'n', 'N', '']
-        }
-    ]
+            "regexp": re.compile(r"^(?:~||null|Null|NULL)$", re.X),
+            "start_chars": ["~", "n", "N", ""],
+        },
+    ],
 }
 
-merge_resolver = {
-    "tag": "tag:yaml.org,2002:merge",
-    "regexp": re.compile(r'^(?:<<)$'),
-    "start_chars": ['<']
-}
+merge_resolver = {"tag": "tag:yaml.org,2002:merge", "regexp": re.compile(r"^(?:<<)$"), "start_chars": ["<"]}
+
 
 def set_yaml_grammar(resolver, grammar_version="1.2", expand_merge_keys=True):
     if grammar_version not in core_resolvers:
@@ -93,10 +117,11 @@
         resolvers.append(merge_resolver)
     resolver.yaml_implicit_resolvers = {}
     for r in resolvers:
-        for start_char in r["start_chars"]:
+        for start_char in r["start_chars"]:  # type: ignore
             resolver.yaml_implicit_resolvers.setdefault(start_char, [])
             resolver.yaml_implicit_resolvers[start_char].append((r["tag"], r["regexp"]))
 
+
 def hash_key(key):
     return b64encode(sha224(key.encode() if isinstance(key, str) else key).digest()).decode()
 
@@ -129,6 +154,7 @@
         anchor_token = self.scan_anchor(AnchorToken)  # noqa: F841
         # self.emit_yq_kv("__yq_anchor__", anchor_token.value, original_token=anchor_token)
 
+
 def get_loader(use_annotations=False, expand_aliases=True, expand_merge_keys=True):
     def construct_sequence(loader, node):
         annotations = []
@@ -171,7 +197,7 @@
     loader_class = default_loader if expand_aliases else CustomLoader
     loader_class.add_constructor(yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG, construct_mapping)
     loader_class.add_constructor(yaml.resolver.BaseResolver.DEFAULT_SEQUENCE_TAG, construct_sequence)
-    loader_class.add_multi_constructor('', parse_unknown_tags)
+    loader_class.add_multi_constructor("", parse_unknown_tags)
     loader_class.yaml_constructors.pop("tag:yaml.org,2002:binary", None)
     loader_class.yaml_constructors.pop("tag:yaml.org,2002:set", None)
     set_yaml_grammar(loader_class, expand_merge_keys=expand_merge_keys)
diff --suppress-common-lines -u -r -x '*.pyc' -x installed-files.txt /tmp/tmp.0KEflWmt0V/lib/python3.8/site-packages/yq/__main__.py /tmp/tmp.XOOC51JVyg/lib/python3.8/site-packages/yq/__main__.py
--- /tmp/tmp.0KEflWmt0V/lib/python3.8/site-packages/yq/__main__.py	2023-02-09 10:11:08.000000000 -0500
+++ /tmp/tmp.XOOC51JVyg/lib/python3.8/site-packages/yq/__main__.py	2023-03-01 15:38:51.626106607 -0500
@@ -1,4 +1,4 @@
-from yq.__init__ import cli
+from . import cli
 
 if __name__ == "__main__":
     cli()
diff --suppress-common-lines -u -r -x '*.pyc' -x installed-files.txt /tmp/tmp.0KEflWmt0V/lib/python3.8/site-packages/yq/parser.py /tmp/tmp.XOOC51JVyg/lib/python3.8/site-packages/yq/parser.py
--- /tmp/tmp.0KEflWmt0V/lib/python3.8/site-packages/yq/parser.py	2023-02-09 10:11:08.000000000 -0500
+++ /tmp/tmp.XOOC51JVyg/lib/python3.8/site-packages/yq/parser.py	2023-03-01 15:38:51.627106607 -0500
@@ -1,6 +1,7 @@
-from __future__ import absolute_import, division, print_function, unicode_literals
-
-import sys, argparse, subprocess
+import argparse
+import subprocess
+import sys
+from typing import Union
 
 try:
     from .version import version as __version__
@@ -8,8 +9,20 @@
     __version__ = "0.0.0"
 
 # jq arguments that consume positionals must be listed here to avoid our parser mistaking them for our positionals
-jq_arg_spec = {"--indent": 1, "-f": 1, "--from-file": 1, "-L": 1, "--arg": 2, "--argjson": 2, "--slurpfile": 2,
-               "--argfile": 2, "--rawfile": 2, "--args": argparse.REMAINDER, "--jsonargs": argparse.REMAINDER}
+jq_arg_spec = {
+    "--indent": 1,
+    "-f": 1,
+    "--from-file": 1,
+    "-L": 1,
+    "--arg": 2,
+    "--argjson": 2,
+    "--slurpfile": 2,
+    "--argfile": 2,
+    "--rawfile": 2,
+    "--args": argparse.REMAINDER,
+    "--jsonargs": argparse.REMAINDER,
+}
+
 
 class Parser(argparse.ArgumentParser):
     def print_help(self):
@@ -21,6 +34,7 @@
         except Exception:
             pass
 
+
 def get_parser(program_name, description):
     # By default suppress these help strings and only enable them in the specific programs.
     yaml_output_help, yaml_roundtrip_help, width_help, indentless_help, grammar_help = [argparse.SUPPRESS] * 5
@@ -30,23 +44,27 @@
     if program_name == "yq":
         current_language = "YAML"
         yaml_output_help = "Transcode jq JSON output back into YAML and emit it"
-        yaml_roundtrip_help = ("Transcode jq JSON output back into YAML and emit it. "
-                               "Preserve YAML tags and styles by representing them as extra items "
-                               "in their enclosing mappings and sequences while in JSON. This option "
-                               "is incompatible with jq filters that do not expect these extra items.")
+        yaml_roundtrip_help = (
+            "Transcode jq JSON output back into YAML and emit it. "
+            "Preserve YAML tags and styles by representing them as extra items "
+            "in their enclosing mappings and sequences while in JSON. This option "
+            "is incompatible with jq filters that do not expect these extra items."
+        )
         width_help = "When using --yaml-output, specify string wrap width"
-        indentless_help = ("When using --yaml-output, indent block style lists (sequences) "
-                           "with 0 spaces instead of 2")
-        grammar_help = ("When using --yaml-output, specify output grammar (the default is 1.1 and will be changed "
-                        "to 1.2 in a future version). Setting this to 1.2 will cause strings like 'on' and 'no' to be "
-                        "emitted unquoted.")
+        indentless_help = "When using --yaml-output, indent block style lists (sequences) " "with 0 spaces instead of 2"
+        grammar_help = (
+            "When using --yaml-output, specify output grammar (the default is 1.1 and will be changed "
+            "to 1.2 in a future version). Setting this to 1.2 will cause strings like 'on' and 'no' to be "
+            "emitted unquoted."
+        )
     elif program_name == "xq":
         current_language = "XML"
         xml_output_help = "Transcode jq JSON output back into XML and emit it"
         xml_dtd_help = "Preserve XML Document Type Definition (disables streaming of multiple docs)"
         xml_root_help = "When transcoding back to XML, envelope the output in an element with this name"
-        xml_force_list_help = ("Tag name to pass to force_list parameter of xmltodict.parse(). "
-                               "Can be used multiple times.")
+        xml_force_list_help = (
+            "Tag name to pass to force_list parameter of xmltodict.parse(). " "Can be used multiple times."
+        )
     elif program_name == "tomlq":
         current_language = "TOML"
         toml_output_help = "Transcode jq JSON output back into TOML and emit it"
@@ -59,30 +77,48 @@
         parser_args.update(allow_abbrev=False)  # required to disambiguate options listed in jq_arg_spec
     parser = Parser(**parser_args)
     parser.add_argument("--output-format", default="json", help=argparse.SUPPRESS)
-    parser.add_argument("--yaml-output", "--yml-output", "-y", dest="output_format", action="store_const", const="yaml",
-                        help=yaml_output_help)
-    parser.add_argument("--yaml-roundtrip", "--yml-roundtrip", "-Y", dest="output_format", action="store_const",
-                        const="annotated_yaml", help=yaml_roundtrip_help)
-    parser.add_argument("--yaml-output-grammar-version", "--yml-out-ver", choices=["1.1", "1.2"], default="1.1",
-                        help=grammar_help)
+    parser.add_argument(
+        "--yaml-output",
+        "--yml-output",
+        "-y",
+        dest="output_format",
+        action="store_const",
+        const="yaml",
+        help=yaml_output_help,
+    )
+    parser.add_argument(
+        "--yaml-roundtrip",
+        "--yml-roundtrip",
+        "-Y",
+        dest="output_format",
+        action="store_const",
+        const="annotated_yaml",
+        help=yaml_roundtrip_help,
+    )
+    parser.add_argument(
+        "--yaml-output-grammar-version", "--yml-out-ver", choices=["1.1", "1.2"], default="1.1", help=grammar_help
+    )
     parser.add_argument("--width", "-w", type=int, help=width_help)
     parser.add_argument("--indentless-lists", "--indentless", action="store_true", help=indentless_help)
     parser.add_argument("--explicit-start", action="store_true", help=argparse.SUPPRESS)
     parser.add_argument("--explicit-end", action="store_true", help=argparse.SUPPRESS)
     parser.add_argument("--no-expand-aliases", action="store_false", dest="expand_aliases", help=argparse.SUPPRESS)
     parser.add_argument("--max-expansion-factor", type=int, default=1024, help=argparse.SUPPRESS)
-    parser.add_argument("--xml-output", "-x", dest="output_format", action="store_const", const="xml",
-                        help=xml_output_help)
+    parser.add_argument(
+        "--xml-output", "-x", dest="output_format", action="store_const", const="xml", help=xml_output_help
+    )
     parser.add_argument("--xml-dtd", action="store_true", help=xml_dtd_help)
     parser.add_argument("--xml-root", help=xml_root_help)
     parser.add_argument("--xml-force-list", action="append", help=xml_force_list_help)
-    parser.add_argument("--toml-output", "-t", dest="output_format", action="store_const", const="toml",
-                        help=toml_output_help)
+    parser.add_argument(
+        "--toml-output", "-t", dest="output_format", action="store_const", const="toml", help=toml_output_help
+    )
     parser.add_argument("--in-place", "-i", action="store_true", help="Edit files in place (no backup - use caution)")
     parser.add_argument("--version", action="version", version="%(prog)s {version}".format(version=__version__))
 
     for arg in jq_arg_spec:
-        parser.add_argument(arg, nargs=jq_arg_spec[arg], dest=arg, action="append", help=argparse.SUPPRESS)
+        nargs: Union[int, str] = jq_arg_spec[arg]  # type: ignore
+        parser.add_argument(arg, nargs=nargs, dest=arg, action="append", help=argparse.SUPPRESS)
 
     parser.add_argument("jq_filter", nargs="?")
     parser.add_argument("input_streams", nargs="*", type=argparse.FileType(), metavar="files", default=[])
diff --suppress-common-lines -u -r -x '*.pyc' -x installed-files.txt /tmp/tmp.0KEflWmt0V/lib/python3.8/site-packages/yq/version.py /tmp/tmp.XOOC51JVyg/lib/python3.8/site-packages/yq/version.py
--- /tmp/tmp.0KEflWmt0V/lib/python3.8/site-packages/yq/version.py	2023-02-09 10:11:08.000000000 -0500
+++ /tmp/tmp.XOOC51JVyg/lib/python3.8/site-packages/yq/version.py	2023-03-01 15:38:51.627106607 -0500
@@ -1,5 +1,4 @@
-# coding: utf-8
 # file generated by setuptools_scm
 # don't change, don't track in version control
-__version__ = version = '3.1.0'
-__version_tuple__ = version_tuple = (3, 1, 0)
+__version__ = version = '3.1.1'
+__version_tuple__ = version_tuple = (3, 1, 1)
Only in /tmp/tmp.0KEflWmt0V/lib/python3.8/site-packages: yq-3.1.0.dist-info
Only in /tmp/tmp.XOOC51JVyg/lib/python3.8/site-packages: yq-3.1.1.dist-info
***** END DIFF
Untagged: localhost/devfileregistry:tmp
Deleted: 6603efae96d41ce26ef68ab34c220106010fbc1e6b748e0c3c0a55a7bee352e9
Deleted: b9e9391973a457a59b7b98d76f1954cd6649aafcf50f58a7d97264088b6324e1
Deleted: ce8abf15974585ef095ed5395a68f1421bb4af4ac9e8f399028b4e1fec12ad85
Deleted: 9c6e2d161d3ee8186bdaf77b6050efea2451ab4fabe09043d795fef52f047524
Deleted: 700a6006e8aaefe6ec0f066f47695feaf30d2ca5fc151813c3a95efada050907
Deleted: b94b5d8cc90f287e922a7050e40ea493ae1a2f3fb45a841a9bb048257b7dadd8
Deleted: 5f84bbef17510b51225fc104013021b95d5804d877df193fd7a52629b628a085
Deleted: 0becfd62963c7dbbbb3af05625fcac958be95878e034886222b229eee8656ae6
Deleted: a46c2b9a666168eef6a60945b35f54e3bd4def50d35d12f204cf7e7fbf111d64
Deleted: f6a7eb2200c2f862d3d9245d145b6f62eece35ef3d3636079c287261cd528804
Deleted: bcd4858567163f3b16c7ce0314d039de088a65105cf738e4702490cdacb69ce5
Deleted: 4eca93f99e18c9087fa4497948c6a9174d028d06fc7f4e5f995f0229156f55f8
Deleted: e2a34e930338b8842f42ddb44f5d56804c29f69c1b2bd523c9a904dabb751c48
Deleted: e69dbce3f1e7bae86aafc0cf99e31a7b3c243cac4f6a076160e8d1141987a835
Deleted: 1cebe37a2ab80ae513923f087f4c35ffec9bb5614978577ee958b36485da4a4e
Deleted: 8e68ddab8daffceb1f856ef8134ba74a92427c0bd5dbe2a6f65dce10f4bda66b
Deleted: 73924979f724539dea8b26079633c94020c154d61879c3db7877dff5a25bdd66
Deleted: e85c183f480e81671e9e4b79a54410b5179d70c0811f627e22ceeff007a2276d
Deleted: 6c9623dab723e9fb0b1a4d8af005b390d6ea33a0270ed58399406bc0e54c9827
Deleted: 98857873f6ec8e27fad493e88f0f89a1a14fb961567fc8a0fc6d22c131a77f0f
Deleted: 0cc11c90e9c36a3c75c35130dccd2b1a5f82ae450bbe834fcd563978d71001f8
Deleted: 1cfc272b5ec5cabf96b347d2e741b516075a4e95f8cbf1e78f9d945a3acd1a0d
Uploading: root-local.tgz
File already uploaded: resources.tgz
Source upload succeeded. Don't forget to commit the sources file
rm 'resources.tgz'
rm 'root-local.tgz'

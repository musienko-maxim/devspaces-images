#!/usr/bin/env groovy
import groovy.transform.Field

// PARAMETERS for this pipeline:
//   MIDSTM_BRANCH
//   CLEAN_ON_FAILURE = "true"

def String nodeLabel = 'x86_64-rhel8||s390x-rhel8-perm||ppc64le-rhel8'
timeout(env.TIMEOUT?.trim() ? env.TIMEOUT.toInteger() : 600) {
        node(nodeLabel) {
        stage ("Trigger builds for whole Dev Spaces stack on ${nodeLabel}") {
            wrap([$class: 'TimestamperBuildWrapper']) {
                sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/' + MIDSTM_BRANCH + '/product/util2.groovy')
                def util = load "${WORKSPACE}/util2.groovy"
                cleanWs()
                DS_VERSION = util.getDsVersion(MIDSTM_BRANCH)
                println "DS_VERSION = '" + DS_VERSION + "'"
                JOB_BRANCH = util.getJobBranch(MIDSTM_BRANCH)
                currentBuild.description="Jobs run:"
                withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN')]) {
                    def currentJob="" // name of job
                    def currentQuayImage="" // last successful quay tag
                    def jenkinsPath="/job/DS_CI/job/"
                    def jenkinsURL="${JENKINS_URL}${jenkinsPath}".replaceAll("//job","/job")

                    def List PHASE_LIST = PHASES.tokenize(" ").collect { it.trim() }

                    if (PHASE_LIST.contains("2")) {
                        // 10 jobs
                        def jobsList = [
                            "configbump",
                            "dashboard",
                            "devfileregistry",
                            "imagepuller",
                            "machineexec",
                            "operator",                 // special case: "devspaces-rhel8-operator"
                            "pluginregistry",
                            "server",
                            "traefik",
                            "udi"                       // @since 2.16
                        ]

                        def Map tasks = [failFast: false]
                        // must define all vars before closure, per https://www.jenkins.io/doc/pipeline/examples/#parallel-from-list
                        for (job in jobsList) {
                            def job_name="${job}"// job name
                            def image_name=job.toString().trim().equals("operator") ? "devspaces-rhel8-operator" : "${job_name}-rhel8" // image name
                            def currentJobLoc=job_name + "_" + JOB_BRANCH
                            if (!util.checkURL(jenkinsURL + currentJobLoc)) { 
                                println("[WARNING] No such job " + jenkinsURL + currentJobLoc + " : skip!"); 
                                    currentBuild.description+="<br/>* SKIP: <a href=${jenkinsPath}${currentJobLoc}>${currentJobLoc}</a>"
                            } else {
                                def currentQuayImageLoc = util.getLatestImageAndTag("devspaces/" + image_name, "quay")
                                tasks[currentJobLoc] = { ->
                                    println ("Got currentQuayImageLoc (" + image_name + " / " + job_name + ") = " + currentQuayImageLoc)
                                    def lastBuildId3 = " <- util.runJob("+jenkinsPath + currentJobLoc+", true)"
                                    lastBuildId3 = util.runJob(jenkinsPath + currentJobLoc, true, true, JENKINS_URL, 
                                        util.globalVar({TIMEOUT})?.trim() ? util.globalVar({TIMEOUT}) : 180) // DO wait for these to finish
                                    println ("Started job for " + job_name + ": " + jenkinsURL + currentJobLoc + "/" + lastBuildId3)
                                    if (!util.waitForNewQuayImage("devspaces/" + image_name, currentQuayImageLoc)) {
                                        currentBuild.result = 'FAILED'
                                        util.notifyBuildFailed()
                                    }
                                    currentBuild.description+="<br/>* <a href=${jenkinsPath}${currentJobLoc}/${lastBuildId3}>${currentJobLoc}#${lastBuildId3}</a>"
                                }
                            }
                        }
                        // wait in parallel
                        parallel(tasks)
                    }

                    if (PHASE_LIST.contains("3")) {
                        // 2 jobs
                        def jobsList = [
                            "code",                     // @since 3.1
                            "idea"                      // @since 2.11; depends on machineexec
                        ]

                        def Map tasks = [failFast: false]
                        // must define all vars before closure, per https://www.jenkins.io/doc/pipeline/examples/#parallel-from-list
                        for (job in jobsList) {
                            def job_name="${job}"// job name
                            def image_name=job.toString().trim().equals("operator") ? "devspaces-rhel8-operator" : "${job_name}-rhel8" // image name
                            def currentJobLoc=job_name + "_" + JOB_BRANCH
                            if (!util.checkURL(jenkinsURL + currentJobLoc)) { 
                                println("[WARNING] No such job " + jenkinsURL + currentJobLoc + " : skip!"); 
                                    currentBuild.description+="<br/>* SKIP: <a href=${jenkinsPath}${currentJobLoc}>${currentJobLoc}</a>"
                            } else {
                                def currentQuayImageLoc = util.getLatestImageAndTag("devspaces/" + image_name, "quay")
                                tasks[currentJobLoc] = { ->
                                    println ("Got currentQuayImageLoc (" + image_name + " / " + job_name + ") = " + currentQuayImageLoc)
                                    def lastBuildId3 = " <- util.runJob("+jenkinsPath + currentJobLoc+", true)"
                                    lastBuildId3 = util.runJob(jenkinsPath + currentJobLoc, true, true, JENKINS_URL, 
                                        util.globalVar({TIMEOUT})?.trim() ? util.globalVar({TIMEOUT}) : 180) // DO wait for these to finish
                                    println ("Started job for " + job_name + ": " + jenkinsURL + currentJobLoc + "/" + lastBuildId3)
                                    if (!util.waitForNewQuayImage("devspaces/" + image_name, currentQuayImageLoc)) {
                                        currentBuild.result = 'FAILED'
                                        util.notifyBuildFailed()
                                    }
                                    currentBuild.description+="<br/>* <a href=${jenkinsPath}${currentJobLoc}/${lastBuildId3}>${currentJobLoc}#${lastBuildId3}</a>"
                                }
                            }
                        }
                        // wait in parallel
                        parallel(tasks)
                    }

                    if (PHASE_LIST.contains("4")) {
                        currentQuayImageBundle = util.getLatestImageAndTag("devspaces/devspaces-operator-bundle", "quay")
                        println ("Got currentQuayImageBundle = " + currentQuayImageBundle)

                        // trigger update-digests job (to rebuild bundle image)
                        // 1 job
                        currentJob="update-digests_" + JOB_BRANCH
                        def int lastBuildId4 = util.runJob(jenkinsPath + currentJob, false) // don't wait for this to finish
                        currentBuild.description+="<br/>* <a href=${jenkinsPath}${currentJob}/${lastBuildId4}>update-digests#${lastBuildId4}</a> triggered"
                    }
                } // withCredentials
            } // wrap
            cleanWs(
                cleanWhenSuccess: true,
                cleanWhenUnstable: true,
                cleanWhenNotBuilt: false,
                cleanWhenFailure: CLEAN_ON_FAILURE,
                cleanWhenAborted: true,
                deleteDirs: true,
                disableDeferredWipeout: true,
                notFailBuild: true
            )
        } // stage
    } // node
} // timeout

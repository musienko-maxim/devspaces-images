#!/usr/bin/env groovy

// PARAMETERS for this pipeline:
//  DS_VERSION = 3.5
//  DS_VERSION_NEXT = 3.6
//  NEW_BRANCH = "devspaces-3.y-rhel-8" // branch to create
//  MIDSTM_BRANCH = "devspaces-3-rhel-8" // redhat-developer/devspaces branch to use as source of the new branches
//  CLEAN_ON_FAILURE = "true"

def List GH_REPOS = [
    'devspaces',
    // TODO remove theia repo after 3.5 is live
    'devspaces-theia',
    'devspaces-images',
    'devspaces-chectl'
    ]

def buildNode = "x86_64-rhel8||s390x-rhel8-perm||ppc64le-rhel8"
timeout(120) {
    node("${buildNode}"){
        stage("Create branches") {
            wrap([$class: 'TimestamperBuildWrapper']) {
                sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+ MIDSTM_BRANCH + '/product/util2.groovy')
                def util = load "${WORKSPACE}/util2.groovy"
                // if set as job param, use that; else compute from MIDSTM_BRANCH
                DS_VERSION = util.globalVar({DS_VERSION})?.trim() ? util.globalVar({DS_VERSION}) : util.getDsVersion(MIDSTM_BRANCH)
                DS_VERSION_NEXT = util.globalVar({DS_VERSION_NEXT})?.trim() ? util.globalVar({DS_VERSION_NEXT}) : util.getDsVersion(MIDSTM_BRANCH)
                cleanWs()
                sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+ MIDSTM_BRANCH + '/product/tagRelease.sh && chmod +x tagRelease.sh')
                sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+ MIDSTM_BRANCH + '/product/containerExtract.sh && chmod +x containerExtract.sh')
                withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN')]) {
                    currentBuild.description=""
                    for (int i=0; i < GH_REPOS.size(); i++) {
                        println "##  Clone github.com/redhat-developer/${GH_REPOS[i]}.git"
                        util.cloneRepo("https://github.com/redhat-developer/${GH_REPOS[i]}.git", "/tmp/tmp-checkouts/projects_${GH_REPOS[i]}", MIDSTM_BRANCH, false)
                    }
                    // create/update the 3.yy branches
                    currentBuild.description+="create/update ${NEW_BRANCH} branch from ${MIDSTM_BRANCH} for ${DS_VERSION} ... "
                    sh ('''
                    ./tagRelease.sh --clean -t ''' + DS_VERSION + ''' --branchfrom ''' + MIDSTM_BRANCH + ''' -gh ''' + NEW_BRANCH + ''' -ghtoken ''' + GITHUB_TOKEN
                    )
                    currentBuild.description+="done;<br/> "

                    // now update the 3.x branches to the new 3.next version
                    currentBuild.description+="create/update ${MIDSTM_BRANCH} branches to ${DS_VERSION_NEXT} ... "
                    sh ('''
                    ./tagRelease.sh --clean -t ''' + DS_VERSION_NEXT + ''' --branchfrom ''' + MIDSTM_BRANCH + ''' -gh ''' + MIDSTM_BRANCH + ''' -ghtoken ''' + GITHUB_TOKEN
                    )
                    currentBuild.description+="done"

                } //with
            } // wrap
            cleanWs(
                cleanWhenSuccess: true,
                cleanWhenUnstable: true,
                cleanWhenNotBuilt: false,
                cleanWhenFailure: CLEAN_ON_FAILURE,
                cleanWhenAborted: true,
                deleteDirs: true,
                disableDeferredWipeout: true,
                notFailBuild: true
            )
        } // stage
    } // node
} // timeout

#!/usr/bin/env groovy
import groovy.transform.Field

// PARAMETERS for this pipeline:
//  MIDSTM_BRANCH
//  DS_VERSION
//  OCP_VERSIONS

def String nodeLabel = '(x86_64-rhel8||s390x-rhel8-perm||ppc64le-rhel8)'
def copyIIBsToQuayTimeout=120
def util = null
node(nodeLabel){ 
  stage ("Update metadata") {
    withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN')]) {
      sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+ MIDSTM_BRANCH + '/product/util2.groovy')
      util = load "${WORKSPACE}/util2.groovy"
      // comment on the PR with links to this job
      if (util.globalVar({comments_url})?.trim()) {
        println("Used PR comment URL: " + util.commentOnPullRequestBuildLinks(util.globalVar({comments_url})))
      }

      // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
      // NOTE: similar code in send-email-qe-build-list*.jenkinsfile
      // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 

      nodeLabelString = sh(script: '''
curl -sSLo- https://raw.githubusercontent.com/redhat-developer/devspaces-images/''' + MIDSTM_BRANCH + '''/devspaces-operator-bundle/container.yaml | yq -r '.platforms.only[]' 
''', returnStdout: true).trim()
      currentBuild.description="<b>" + DS_VERSION + "</b><br/>" + "arches = " + nodeLabelString.replaceAll("\n",", ") + "; "

      def List nodeLabels = nodeLabelString.tokenize("\n")
      def nodeLabelLoop = ""
      def Map tasks = [failFast: false]
      for (int j=0; j < nodeLabels.size(); j++) {
        nodeLabelLoop=nodeLabels[j]+"-rhel8"
        print "[" + (j+1) + "/" + nodeLabels.size() + "] Create task to copy IIBs: operator-bundle " + nodeLabel
        def String thisArch=nodeLabelLoop
        // copy & filter IIB for this arch
        tasks["operator-bundle " + thisArch] = { ->
          timeout(copyIIBsToQuayTimeout) {
            node(thisArch){
              stage("Copy IIBs: operator-bundle " + thisArch) {
                // sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+ MIDSTM_BRANCH + '/product/util2.groovy')
                // util = load "${WORKSPACE}/util2.groovy"
                cleanWs()

                println("Filtering and copying images to quay. This may take ~3 mins per OCP version per arch.")
                def IIBsToQuay = sh(script: '''#!/bin/bash -xe
curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/''' + MIDSTM_BRANCH + '''/product/copyIIBsToQuay.sh && chmod +x copyIIBsToQuay.sh
./copyIIBsToQuay.sh -v --push -t ''' + DS_VERSION + ''' -o "''' + OCP_VERSIONS + '''"''' + (FORCE_BUILD == true || FORCE_BUILD.toString().equals("true") ? ''' --force''' : ""), returnStdout: true)

                // in console, echo all errors and warnings
                println "####################################################################################################################COPIED\n\
##  IIB(s) copied:\n\
## " + IIBsToQuay.trim().replaceAll("\n", "\n## ")+"\n\
####################################################################################################################COPIED\n"

                // extract bundles to job desc
                def IIBsToQuay_matches = null
                IIBsToQuay_matches = ( IIBsToQuay =~ /.+(LATEST DS +OPERATOR BUNDLE) = (.+)/ )
                (0..<IIBsToQuay_matches.count).each { 
                  if (!currentBuild.description.contains(IIBsToQuay_matches[it][2])) {
                    currentBuild.description+="<br/>&nbsp;&nbsp;* " + IIBsToQuay_matches[it][1] + " = <a href=https://quay.io/repository/devspaces/devspaces-operator-bundle?tab=tags>" + IIBsToQuay_matches[it][2] + "</a>"
                  }
                }
                IIBsToQuay_matches = null

                IIBsToQuay_matches = ( IIBsToQuay =~ /.+(LATEST DWO OPERATOR BUNDLE) = (.+)/ )
                (0..<IIBsToQuay_matches.count).each { 
                  if (!currentBuild.description.contains(IIBsToQuay_matches[it][2])) {
                    currentBuild.description+="<br/>&nbsp;&nbsp;* " + IIBsToQuay_matches[it][1] + " = <a href=https://quay.io/repository/devworkspace/devworkspace-operator-bundle?tab=tags>" + IIBsToQuay_matches[it][2] + "</a>"
                  }
                }
                IIBsToQuay_matches = null

                currentBuild.description+="<br/>+ ${thisArch} IIB(s) copied: "
                // for build description, collect the lines that start with [IMG]; ignore all other output
                IIBsToQuay_matches = ( IIBsToQuay =~ /\[IMG\] (quay.io.+)/ )
                (0..<IIBsToQuay_matches.count).each { 
                    currentBuild.description+="<br/>&nbsp;&nbsp;+ <a href=https://" + IIBsToQuay_matches[it][1] + ">" + IIBsToQuay_matches[it][1] + "</a>"
                }
                IIBsToQuay_matches = null
                // return to the nullspace from whence it came (to avoid java.io.NotSerializableException java.util.regex.Matcher)
                // https://stackoverflow.com/questions/40454558/jenkins-pipeline-java-io-notserializableexception-java-util-regex-matcher-error
                cleanWs(
                    cleanWhenSuccess: true,
                    cleanWhenUnstable: true,
                    cleanWhenNotBuilt: false,
                    cleanWhenFailure: true,
                    cleanWhenAborted: true,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true
                )
              }// inner stages 
            }//node
          }//timeout
        }// tasks
      }// for
      stage("Copy IIBs for each arch") {
          println "########################################################################################################"
          println "##  Copy IIBs for arches " + nodeLabelString
          println "########################################################################################################"
          parallel(tasks)
      }
      stage ("Build Desc on Pull Request") {
        sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+ MIDSTM_BRANCH + '/product/util2.groovy')
        util = load "${WORKSPACE}/util2.groovy"
        // comment on the PR with this job's build description
        if (util.globalVar({comments_url})?.trim()) {
          println("Used PR comment URL: " + util.commentOnPullRequestBuildDescription(util.globalVar({comments_url})))
        }
      }
      cleanWs(
          cleanWhenSuccess: true,
          cleanWhenUnstable: true,
          cleanWhenNotBuilt: false,
          cleanWhenFailure: true,
          cleanWhenAborted: true,
          deleteDirs: true,
          disableDeferredWipeout: true,
          notFailBuild: true
      )
    } // with
  } // outer stage
} //node

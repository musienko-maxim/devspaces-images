- hosts: all
  gather_facts: false
  tags:
    - udi

  environment:
    VERSION: 2.7
    IMAGE_FULL_NAME: "{{ image_full_name }}"
    IMAGE_REGISTRY_URL: "{{ image_registry_url }}"
    IMAGE_NAMESPACE: "{{ image_namespace }}"
    IMAGE_NAME: "{{ image_name }}"
    IMAGE_TAG: "{{ image_tag }}"
    OPENSHIFT_CLUSTER_URL: "{{ openshift_cluster_url }}"
    OPENSHIFT_AUTH_TOKEN: "{{ openshift_auth_token }}"
    OPENSHIFT_USERNAME: "{{ openshift_username }}"
    OPENSHIFT_PROJECT_NAME: "{{ openshift_project_name }}"

  tasks:
    - name: "Run container and perform simple checks"
      block:
        - name: Log into the OpenShift cluster
          shell: oc login {{ openshift_cluster_url }} --token="{{ openshift_auth_token }}" --insecure-skip-tls-verify
        - name: Select the project {{ openshift_project_name }}
          shell: oc project {{ openshift_project_name }}
        - name: Import the image into OpenShift
          shell: oc import-image {{ image_name }} --from={{ image_full_name }} --insecure=true --confirm
        - name: Get imported image registry URL
          shell: oc get is {{ image_name }} --output=jsonpath='{ .status.dockerImageRepository }'
          register: imported_image_url
        - name: Start a dummy {{ image_namespace }}/{{ image_name }}:{{ image_tag }} container
          shell: oc run udi-cmd-test -i --image={{ imported_image_url.stdout }} --command -- bash
        - name: Figure out a pod name for the started container
          shell: oc get pods --selector deploymentconfig=udi-cmd-test --output=jsonpath='{ .items[*].metadata.name }'
          register: pod_name
        - name: Make sure helm, kubectl and oc are present in the container and in the path
          shell: oc exec {{ pod_name.stdout }} -- bash -c "echo -n 'Helm: '; helm version --short --client; echo -n 'Kubectl: '; kubectl version --short --client=true; echo 'oc: '; oc version"
          register: helm_kubectl_oc_cmd_run
        - debug:
            msg: "{{ helm_kubectl_oc_cmd_run.stdout }}"
        - name: Make sure node, java, clangd commands are available in the container
          shell: oc exec {{ pod_name.stdout }} -- bash -c "echo -n 'Node: '; node --version; echo; java -version; echo; clangd --version"
          register: node_java_clangd_cmd_run
        - debug:
            msg: "{{ node_java_clangd_cmd_run.stdout }}"
        - name: Make sure go, php, python (venv) commands are available in the container
          shell: oc exec {{ pod_name.stdout }} -- bash -c "php --version; echo; go version; echo; python3.8 -m venv .venv && . .venv/bin/activate; python -V; pip -V; pylint --version"
          register: go_php_python_cmd_run
        - debug:
            msg: "{{ go_php_python_cmd_run.stdout }}"
        # start php lang server, then kill it
        - name: 1/4 Start up PHP Language Server
          shell: oc exec {{ pod_name.stdout }} -- php /home/jboss/che/ls-php/php-language-server/bin/php-language-server.php 2>&1 &
          register: phpls_cmd_run
        - debug:
            msg: "{{ phpls_cmd_run.stdout }}"
        - name: 2/4 Verify Zend Debugger is loaded
          shell: if [[ $(echo '{{ phpls_cmd_run.stdout }}' | grep -E 'later version of Zend Debugger|which is installed, is newer') ]]; then echo '{{ phpls_cmd_run.stdout }}'; exit 1; fi
          register: phpls_read_startup
        - debug:
            msg: "{{ phpls_read_startup.stdout }}"
        - name: 3/4 Check PHP Language Server is running / get processid
          shell: oc exec {{ pod_name.stdout }} -- pgrep -f 'PHP Language Server' | tr "\n\r" "  "
          register: phpls_processid
        - debug:
            msg: "{{ phpls_processid.stdout }}"
        - name: 4/4 Kill PHP Language Server processid
          shell: oc exec {{ pod_name.stdout }} -- kill -9 {{ phpls_processid.stdout }}
          register: phpls_kill
        - debug:
            msg: "{{ phpls_kill.stdout }}"
        # start ts lang server, then kill it
        - name: 1/3 start language server
          shell: oc exec {{ pod_name.stdout }} -- /opt/app-root/src/.npm-global/bin/tsserver 2>&1 &
          register: ls_cmd_run
        - name: 2/3 Kill process
          shell: tspid=$(pgrep -f 'tsserver') && [[ ${tspid} != "" ]] && oc exec {{ pod_name.stdout }} -- kill -9 ${tspid} || true
          register: pid1_kill
        - name: 3/3 Kill process
          shell: tspid=$(pgrep -f 'lang-server') && [[ ${tspid} != "" ]] && oc exec {{ pod_name.stdout }} -- kill -9 ${tspid} || true
          register: pid2_kill
